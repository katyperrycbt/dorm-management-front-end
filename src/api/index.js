import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const API = axios.create({ baseURL: process.env.REACT_APP_BASEURL});

API.interceptors.request.use((req) => {
    if (localStorage.getItem('user')) {
        req.headers.authorization = `Bearer ${JSON.parse(localStorage.getItem('user')).token}`;
    }
    return req;
})

// STUDENTS
// Step 1: Student send a request form for residence
export const requestResidence = (formData) => API.post('/student/request/newRequest', formData);
// Step 2: Admin receive the form in the dashboard of 'form' table

// NOTE: see Database board for the API

// Step 3: Admin looks at the form, if okay then create a new account in the 'account' table

// NOTE: see Database board for the API

// Step 4: Admin backs to the 'form' table, change the status of the request,
//          then create an email containing new account and password inside, 
//          and send to the student email.

// NOTE: see Database board for the API

// Step 5: Student uses the account given from that email to login to the system.
export const signIn = (formData, remember) => API.post(`/student/login/${remember ? 'remember' : 'dontremember'}`, formData);
//     if forgot the account
export const forgotAccount = (formData) => API.post('/student/forgot', formData);
// Step 6: Logged in succesfully, automatically create new request to get 
//      announcements/emails to display in the main menu.
export const getAnnouncementAndEMail = () => API.get('/student/get/announcementAndEmail');


// ADMINS
// Step 1: Some accounts first created by the developers
// Step 2: One admin uses the account to signin to the system
export const adminSignIn = (formData, remember) => API.post(`/admin/login/${remember ? 'remember' : 'dontremember'}`, formData);
//     if forgot the account
export const adminForgotAccount = (formData) => API.post('/admin/forgot', formData);
// Step 3: Also, automatically create new request to get announcements
// why? because one admin can send an email to another admins.
export const adminGetAnnouncementAndEMail = () => API.get('/admin/get/announcementAndEmail');
// Step 4 [Option]: the admin can duplicate the admin account (create admin account)
// and be able to send the email containing this account to the new admin 
export const createAdminAccount = (formData) => API.post('/admin/create/adminAccount', formData);



// About ADMIN 
// see and edit their account
export const getAdminAccount = () => API.get('/admin/get/account');
export const adminEditAccount = (formData) => API.post('/admin/edit/account', formData);

//information => to log their actions
export const getAdminInfo = () => API.get('/admin/get/info');
export const editAdminInfo = (formData) => API.patch('/admin/edit/info', formData);

// create student account
export const adminCreateStudentAccount = (formData) => API.post('/admin/create/studentAccount', formData);

// database dashboard: allows admin to create/edit/delete into the databases

/**
 * whatDatabase includes:
 *      1. Student information
 *      2. Student accommodation/residence information
 *      3. Utility bill
 *      4. Resident bill
 *      5. Notification/Email
 *      6. Account (Student and Admin)
 *      7. Request for residence
 *      8. Request fix
 *      9. Request return/leaving
 */
export const getDatabase = (whatDatabase) => API.get(`/admin/get/database/${whatDatabase}`);
// of course, to create, edit and delete
export const createNewRecord = (whatDatabase, record) => API.post(`/admin/create/database/${whatDatabase}`, record);
export const editRecord = (whatDatabase, oldRecordId, newRecord) => 
    API.patch (`/admin/edit/database/${whatDatabase}/${oldRecordId}`, newRecord);
export const deleteRecord = (whatDatabase, recordId) => API.delete(`/admin/delete/database/${whatDatabase}/${recordId}`);

// about all kinds of bill, when I use the dashboard above to get the Utility Bill Table, for example.
// then when I change the status to "Paid", I need to confirm the dialog form.
// after that, save to the database,..
//  if okay, the backend side need to trigger the function to update a bill that
// - be stored in the utility bill database
// - be sent to the back-end side
// then, back to the front end side, if saved okay, then automatically send the bill to student email

//  Illustration:

/**
 *  DATABASE: UTILITY BILL
 * 
 * ID   | ROOM | MONTH | YEAR |   WATER (LAST RECORD) | WATER (RECENT RECORD) | WATER (TOTAL) | STATUS | BILL
 * 0    | 1234 |  05   | 2021 |          100          |         200           |  200.000VND   | PAID   | [a button]     
 * 1    | 5678 |  05   | 2021 |          150          |         200           |  100.000VND   | UNPAID | "no bill"
 * 
 *     NOTE THAT: the bill in the last column actually an image generated by the data. and should be
 *                  handled by the front-end side. You know, it is just the better interface than the table.
 */


// About Student
// see their account
export const getStudentAccount = () => API.get('/student/get/account');
export const studentEditAccount = (formData) => API.put('/student/edit/account', formData);

//information 
export const getStudentInfo = () => API.get('/student/get/info');
export const editStudentInfo = (formData) => API.patch('/student/edit/info', formData);

// resident info
// export const getResidentInfo = () => API.get('/student/get/resident');
export const getResidentInfo = () =>  API.get('/student/get/info');

// bill info => should return all bills: utility, resident and unpaid
export const getBill = (roomID) => API.get(`/student/get/bill/${roomID}`);

// request fix
export const getRequestFix = () => API.get('/student/get/request/fix');
export const requestFix = (formData) => API.post('/student/request/fix', formData);
// request return/leaving
export const getRequestReturn = () => API.get('/student/get/request/return');
export const requestReturn = (formData) => API.post('/student/request/return', formData);


// get suitable room
export const getAvaiRoom = (type) => API.get(`/room/showAvailableRoom/${type}`);
// get room bill
export const getRoomBill = (roomName, howLong) => API.get(`/admin/get/roomBill?type=${roomName}&howLong=${howLong}`);


export const sendRecovery = (email) => API.post(`/forget/password`, {email: email});

export const updatePassword = (data) => API.put(`/forget/updatePassword`, data);

export const getAllStudentsWithTheirRoomInfo = () => API.get(`admin/get/getAllStudentsWithTheirRoomInfo`);
export const updateStudentRoom = (formData) => API.put(`/admin/update/room`, formData);
export const deactivateAccount = (formData) => API.put(`/admin/deactivate/account`, formData)
export const activateAccount = (formData) => API.put(`/admin/activate/account`, formData)

export const removeRequestFix = (id) => API.delete(`/student/remove/request/fix/${id}`);

